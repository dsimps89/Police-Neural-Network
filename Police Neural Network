# Import required libraries
import numpy as np
import pandas as pd
import tensorflow as tf
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler

# Load and preprocess the dataset (Assuming you have already prepared the data)
data = pd.read_csv('crime_data.csv')  # Replace 'crime_data.csv' with the path to your crime data file
X = data[['location_latitude', 'location_longitude', 'timestamp']]  # Replace with appropriate feature columns
y = data['crime_occurred']  # Assuming 'crime_occurred' is the target variable (0: No crime, 1: Crime occurred)

# Split the dataset into training, validation, and test sets
X_train, X_temp, y_train, y_temp = train_test_split(X, y, test_size=0.3, random_state=42)
X_val, X_test, y_val, y_test = train_test_split(X_temp, y_temp, test_size=0.5, random_state=42)

# Normalize features using Min-Max scaling
scaler = MinMaxScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_val_scaled = scaler.transform(X_val)
X_test_scaled = scaler.transform(X_test)

# Build the Neural Network model
model = tf.keras.Sequential([
    tf.keras.layers.Dense(64, activation='relu', input_shape=(X_train_scaled.shape[1],)),
    tf.keras.layers.Dense(32, activation='relu'),
    tf.keras.layers.Dense(1, activation='sigmoid')
])

# Compile the model
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Train the model
model.fit(X_train_scaled, y_train, epochs=10, batch_size=32, validation_data=(X_val_scaled, y_val))

# Evaluate the model on the test set
loss, accuracy = model.evaluate(X_test_scaled, y_test)
print("Test Loss:", loss)
print("Test Accuracy:", accuracy)

# Predict crime probabilities for new locations and timestamps
new_location = np.array([[latitude, longitude, timestamp]])  # Replace with actual values
new_location_scaled = scaler.transform(new_location)
prediction = model.predict(new_location_scaled)[0][0]
print("Predicted Probability of Crime Occurrence:", prediction)
